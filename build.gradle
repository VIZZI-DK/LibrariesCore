

import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
        classpath 'tech.justagod:cutter:2.1.0-SNAPSHOT'
        classpath 'net.sf.proguard:proguard-gradle:6.0.2'
    }
}

apply plugin: 'forge'
apply plugin: 'cutter'

version = "1.0"
group= "ru.vizzi.LibrariesCore" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LibrariesCore"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}
sourceCompatibility = targetCompatibility = "1.8"
cutter.initializeDefault(true, false)
cutter.removeAnnotations = true
cutter.validation = false

jar {
    manifest {
        attributes 'FMLAT': 'example_at.cfg'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree('buildlib.jar')
}


compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}
dependencies {
        implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
            compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    compile fileTree(include: ['*.jar'], dir: 'lib')

}
tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

task devJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
    manifest {
        attributes 'FMLAT': 'example_at.cfg'
        attributes 'FMLCorePlugin': 'ru.hooklib.example.ExampleHookLoader'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree('buildlib.jar')
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives devJar
    archives sourcesJar
}


task zipMod(type: Zip) {
    archiveName = archivesBaseName+"-"+version+".zip"
    destinationDir = file("$projectDir/")

    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-client-obf.jar"
    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-server-obf.jar"
    from "$projectDir/LibrariesCore-1.0.client.jar"
    from "$projectDir/LibrariesCore-1.0-server.jar"
    from "$projectDir/eclipse/resources0.zip"
}
task zipALLProject(type: Zip) {
    archiveName = archivesBaseName+"-"+version+"-ALL.zip"
    destinationDir = file("$projectDir/")

    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-client-obf.jar"
    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-server-obf.jar"
    from "$projectDir/eclipse/resources0.zip"
    from "$projectDir/build.gradle"
    from "$projectDir/BuildModALL.bat"
    from "$projectDir/CreateZipMod.bat"
    from "$projectDir/CreateZipModALL.bat"
    from "$projectDir/ObfuscateALL.bat"
    from "$projectDir/ObfuscateClient.bat"
    from "$projectDir/ObfuscateServer.bat"
    from "$projectDir/LibrariesCore-1.0.client.jar"
    from "$projectDir/LibrariesCore-1.0-server.jar"
    into ('src'){
        from "$projectDir/src"
    }
    into ('libs'){
        from "$projectDir/libs"
    }
    into ('proguard'){
        from "$projectDir/proguard/config.txt"
        from "$projectDir/proguard/downloadLibs.txt"
        from "$projectDir/proguard/obfuscate_dictionary.txt"
        from "$projectDir/proguard/obfuscate_mappings.txt"
    }

    byte[] encodeKey = "zGJtHGNHkFD6zST5+HbQnA==".getBytes()

    task encodeResources {
        doLast {
            String targetDir = buildDir.getAbsolutePath() + "/temp"
            String outDir = "output"
            List<String> exclusions = new ArrayList<>()
            exclusions.addAll([
                    "default_resources.zip"
            ])
//        byte[] clientKeyEnc = Base64.getEncoder().encode(encodeKey)
            byte[] clientKeyEnc = encodeKey
            Cipher cipher = Cipher.getInstance("AES")
            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(clientKeyEnc, 0, clientKeyEnc.length, "AES"))
            println ""
            fileTree(targetDir).findAll { file ->
                if(!file.getName().endsWith(".zip") || exclusions.contains(file.getName())) {
                    return
                }
                println "Found zip: " + file.path
                ZipFile zipFile = new ZipFile(file)
                if (zipFile != null) {
                    String fileName = file.name.replace(".zip", "")
                    File encZipNewFile = new File(rootDir.getPath() + "/" + outDir + "/" + fileName+".zip")
                    println "Writing as: " + encZipNewFile.path
                    if(!encZipNewFile.getParentFile().exists()) {
                        encZipNewFile.getParentFile().mkdirs()
                    }
                    encZipNewFile.createNewFile()
                    ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(encZipNewFile))
                    Enumeration<? extends ZipEntry> enumeration = zipFile.entries()
                    String[] types = [".png", ".sp", ".obj", ".vs", ".fs", ".dds"]
                    while(enumeration.hasMoreElements()) {
                        ZipEntry zipEntry = enumeration.nextElement()
                        InputStream inputStream = zipFile.getInputStream(zipEntry)
                        byte[] bytes = getOutputStream(inputStream).toByteArray()
                        for (String type : types) {
                            if(!zipEntry.getName().contains("/") || zipEntry.getName().startsWith("assets/minecraft")
                                    || zipEntry.getName().startsWith("assets/customnpcs") || zipEntry.getName().contains("textures/blocks")
                                    || zipEntry.getName().contains("textures/items")) {
                                println("skipping " + zipEntry.getName())
                                break
                            }
                            if (!zipEntry.isDirectory() && zipEntry.getName().endsWith(type)) {
                                bytes = cipher.doFinal(bytes)
                                break
                            }
                        }
                        zipOutputStream.putNextEntry(new ZipEntry(zipEntry.getName()))
                        zipOutputStream.write(bytes)
                    }
                    zipOutputStream.close()
//                println "Done encoding content. Encoding zip file..."
//                FileInputStream fileInputStream = new FileInputStream(zipNewFile)
//                ByteArrayOutputStream byteArrayOutputStream = getOutputStream(fileInputStream)
//                FileOutputStream fileOutputStream = new FileOutputStream(encZipNewFile)
//                fileOutputStream.write(byteArrayOutputStream.toByteArray())
//                fileOutputStream.flush()
//                fileOutputStream.close()
                    println "Done"
                }
            }
        }
    }





}
static ByteArrayOutputStream getOutputStream(InputStream inputStream) {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()
    byte[] b = new byte[1024]
    int numberOfBytesRead
    while ((numberOfBytesRead = inputStream.read(b)) >= 0) {
        byteArrayOutputStream.write(b, 0, numberOfBytesRead)
    }
    return byteArrayOutputStream
}
